# -*- coding: utf-8 -*-
"""M. Ariel Al-fariz_Data Mining

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YhwLEkV4c5DU32I7_agl3sgxtwQEfZwu

**Langkah Pertama**
Memuat Data
"""

import pandas as pd
df=pd.read_csv('movie_sample_dataset.csv')

"""**Langkah Kedua** Identifikasi Missing Values"""

import numpy as np
# Mengganti "?" dengan NaN
df.replace("?", np.nan, inplace=True)
# Memeriksa jumlah missing values di setiap kolom
print(df.isnull().sum())

"""**Langkah ketiga** Membersihkan Data"""

# Hapsulah baris yang memiliki nilai NaN di kolom 'gross' dan 'budget'
df_cleaned = df.dropna(subset=['color', 'director_name','gross', 'genres','budget'])

# Atasi nilai "N/A" dan nilai negatif

# Gantilah nilai "N/A" atau teks yang setara menjadi NaN terlebih dahulu
df_cleaned.replace("N/A", pd.NA, inplace=True)

# Hapuslah nilai negatif di kolom budget dan gross
df_cleaned = df_cleaned[(df_cleaned['budget'] >= 0) & (df_cleaned['gross'] >= 0)]

# Drop baris yang masih memiliki NaN setelah penggantian "N/A"
df_cleaned = df_cleaned.dropna()

# Atasi nilai yang tidak konsisten dengan mengubah teks di kolom 'color' dan 'country' menjadi huruf kecil
df_cleaned['color'] = df_cleaned['color'].str.lower()
df_cleaned['country'] = df_cleaned['country'].str.lower()

# Ubah teks di kolom 'language' menjadi huruf kecil untuk konsistensi
df_cleaned['language'] = df_cleaned['language'].str.lower()

"""**Langkah Keempat** Transformasi Data"""

df_cleaned['budget'] = pd.to_numeric(df_cleaned['budget'], errors='coerce') #Mengubah tipe data 'budget' menjadi numerik
df_cleaned['gross'] = pd.to_numeric(df_cleaned['gross'], errors='coerce') #Mengubah tipe data 'gross' menjadi numerik
genres_split = df_cleaned['genres'].str.split('|', expand=True) #Memisahkan genre yang bergabung dalam satu kolom
df_cleaned = pd.concat([df_cleaned, genres_split], axis=1) # Menggabungkan kembali dataframe dengan kolom genre yang dipisah
df_cleaned.columns = list(df_cleaned.columns[:len(df_cleaned.columns)-genres_split.shape[1]]) + [f'genre_{i+1}' for i in range(genres_split.shape[1])] #memberi nama kolom genre yang terpisah
# Normalisasi teks di kolom yang relevan: 'color', 'country', 'language'
df_cleaned['language'] = df_cleaned['language'].str.lower()
df_cleaned['country'] = df_cleaned['country'].str.lower()
df_cleaned['color'] = df_cleaned['color'].str.lower()

"""**Langkah Kelima** Menyimpan Data"""

output_path = 'movie_dataset_cleaned.csv'  # Tentukan lokasi penyimpanan yang diinginkan
df_cleaned.to_csv(output_path, index=False)

print(f"Data yang telah dibersihkan dan ditransformasi disimpan ke {output_path}")